// <auto-generated />
using System;
using Forum.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Forum.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240614142810_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Forum.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("CommentAuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("CommentAuthorId");

                    b.HasIndex("TopicId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            CommentAuthorId = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            Content = "Ikomentari",
                            CreatedAt = new DateTime(2024, 6, 14, 14, 28, 9, 874, DateTimeKind.Utc).AddTicks(9847),
                            TopicId = 1
                        },
                        new
                        {
                            CommentId = 2,
                            CommentAuthorId = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            Content = "IIkomentari",
                            CreatedAt = new DateTime(2024, 6, 14, 14, 28, 9, 874, DateTimeKind.Utc).AddTicks(9849),
                            TopicId = 1
                        },
                        new
                        {
                            CommentId = 3,
                            CommentAuthorId = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            Content = "IIIkomentari",
                            CreatedAt = new DateTime(2024, 6, 14, 14, 28, 9, 874, DateTimeKind.Utc).AddTicks(9851),
                            TopicId = 2
                        },
                        new
                        {
                            CommentId = 4,
                            CommentAuthorId = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            Content = "IVkomentari",
                            CreatedAt = new DateTime(2024, 6, 14, 14, 28, 9, 874, DateTimeKind.Utc).AddTicks(9852),
                            TopicId = 1
                        },
                        new
                        {
                            CommentId = 5,
                            CommentAuthorId = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            Content = "Vkomentari",
                            CreatedAt = new DateTime(2024, 6, 14, 14, 28, 9, 874, DateTimeKind.Utc).AddTicks(9859),
                            TopicId = 3
                        },
                        new
                        {
                            CommentId = 6,
                            CommentAuthorId = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            Content = "VIKomentari",
                            CreatedAt = new DateTime(2024, 6, 14, 14, 28, 9, 874, DateTimeKind.Utc).AddTicks(9860),
                            TopicId = 3
                        },
                        new
                        {
                            CommentId = 7,
                            CommentAuthorId = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            Content = "VIIKomentari",
                            CreatedAt = new DateTime(2024, 6, 14, 14, 28, 9, 874, DateTimeKind.Utc).AddTicks(9862),
                            TopicId = 3
                        },
                        new
                        {
                            CommentId = 8,
                            CommentAuthorId = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            Content = "VIIKomentari",
                            CreatedAt = new DateTime(2024, 6, 14, 14, 28, 9, 874, DateTimeKind.Utc).AddTicks(9863),
                            TopicId = 2
                        });
                });

            modelBuilder.Entity("Forum.Entities.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopicAuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TopicId");

                    b.HasIndex("TopicAuthorId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            TopicId = 1,
                            CreatedAt = new DateTime(2024, 6, 14, 14, 28, 9, 874, DateTimeKind.Utc).AddTicks(9753),
                            State = "Pending",
                            Status = "Active",
                            TopicAuthorId = "20BA9755-D9CE-45AE-97D4-CB5AAA5D5956",
                            TopicName = "TopicN1"
                        },
                        new
                        {
                            TopicId = 2,
                            CreatedAt = new DateTime(2024, 6, 14, 14, 28, 9, 874, DateTimeKind.Utc).AddTicks(9758),
                            State = "Pending",
                            Status = "Active",
                            TopicAuthorId = "20BA9755-D9CE-45AE-97D4-CB5AAA5D5956",
                            TopicName = "TopicN2"
                        },
                        new
                        {
                            TopicId = 3,
                            CreatedAt = new DateTime(2024, 6, 14, 14, 28, 9, 874, DateTimeKind.Utc).AddTicks(9759),
                            State = "Pending",
                            Status = "Active",
                            TopicAuthorId = "20BA9755-D9CE-45AE-97D4-CB5AAA5D5956",
                            TopicName = "TopicN3"
                        },
                        new
                        {
                            TopicId = 4,
                            CreatedAt = new DateTime(2024, 6, 14, 14, 28, 9, 874, DateTimeKind.Utc).AddTicks(9761),
                            State = "Pending",
                            Status = "Active",
                            TopicAuthorId = "FC5DA2E8-EACC-4AC9-99F6-F3937B1EF538",
                            TopicName = "TopicN4"
                        },
                        new
                        {
                            TopicId = 5,
                            CreatedAt = new DateTime(2024, 6, 14, 14, 28, 9, 874, DateTimeKind.Utc).AddTicks(9763),
                            State = "Pending",
                            Status = "Active",
                            TopicAuthorId = "FC5DA2E8-EACC-4AC9-99F6-F3937B1EF538",
                            TopicName = "TopicN5"
                        },
                        new
                        {
                            TopicId = 6,
                            CreatedAt = new DateTime(2024, 6, 14, 14, 28, 9, 874, DateTimeKind.Utc).AddTicks(9764),
                            State = "Pending",
                            Status = "Active",
                            TopicAuthorId = "FC5DA2E8-EACC-4AC9-99F6-F3937B1EF538",
                            TopicName = "TopicN6"
                        },
                        new
                        {
                            TopicId = 7,
                            CreatedAt = new DateTime(2024, 6, 14, 14, 28, 9, 874, DateTimeKind.Utc).AddTicks(9766),
                            State = "Pending",
                            Status = "Active",
                            TopicAuthorId = "FC5DA2E8-EACC-4AC9-99F6-F3937B1EF538",
                            TopicName = "TopicN7"
                        });
                });

            modelBuilder.Entity("Forum.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "20BA9755-D9CE-45AE-97D4-CB5AAA5D5956",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7e5c63c-392f-4ef5-8337-cfcc8bafd0a4",
                            Email = "User1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@GMAIL.com",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEE1+w5P0ZKpL8GaT1XH0EErWfkjKU5SNAHUPdCaCAelZUBf83cVfqzUl8o48HNvtJw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "af61310c-e54a-40f1-bcb3-f17a149a4659",
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ad78f04a-6537-47b3-879e-b681f354f22e",
                            Email = "User2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@GMAIL.com",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEAh93t+LEGxAPxGGTVAkIWeJg5gf3VQDAI94WztKq7nDKBOfelLKc0ENSpWo9AsKfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "45f5818c-d3c5-4a91-aaec-08790169e919",
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = "FC2DA2E8-EECC-4AC9-99F6-F3937B1EF538",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2e52ce74-62fd-46e1-861e-6fb9931aba10",
                            Email = "User3@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@GMAIL.com",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAIAAYagAAAAEC+cU+wT/4W9P74BmKatNU8IgZcA9t9shr7Gq1eDnhOJMJ3AVi9mySmF8sO2uu5Xtw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a5532302-9f8e-404b-b068-1cc8b023aae8",
                            TwoFactorEnabled = false,
                            UserName = "User3"
                        },
                        new
                        {
                            Id = "FC3DA2E8-EECC-4AC9-99F6-F4937B1EF538",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5420f687-a603-4c70-8774-6793932be0e1",
                            Email = "User4@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@GMAIL.com",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAIAAYagAAAAEKjW7gd/c3eZfHhRfBfY0ArzkwdYOh1QABE6tnV5aNrYXUQTQseaVxKI+Td1kCfdsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6114d6e7-7133-4fd4-ac78-20bd7bf846a0",
                            TwoFactorEnabled = false,
                            UserName = "User4"
                        },
                        new
                        {
                            Id = "FC4DA2E8-EECC-5AC9-99F6-F3937B1EF538",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b57d09a-f0cb-456c-b371-45a51c4d8e79",
                            Email = "User5@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@GMAIL.com",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAIAAYagAAAAEA0P6eOBtWxY/i/Jihy89YUwEfqMiY4pEN6hnx2xj4CJphfXXs4BYmMXVTwMPomxig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8104ab6f-3f1a-49d9-937c-5e7ba4f1e546",
                            TwoFactorEnabled = false,
                            UserName = "User5"
                        },
                        new
                        {
                            Id = "FC5DA2E8-EACC-4AC9-99F6-F3937B1EF538",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f322758-228c-4e0c-b37f-e652c5db9d44",
                            Email = "User6@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER6@GMAIL.com",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAIAAYagAAAAEE0X83RYl0fS/vtXbZ+GF/DhxxSgoGRLf7jRpQC+CgOtbLI6sOM+TSmmUB7i3zSLCQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b5b4ac0c-d688-48f1-bf8d-e8cd151deeed",
                            TwoFactorEnabled = false,
                            UserName = "User6"
                        },
                        new
                        {
                            Id = "FC6DB2E8-EECC-4AC9-99F6-F3937B1EF538",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "569a81f7-60a0-4d82-bced-e5f11ea81194",
                            Email = "User7@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER7@GMAIL.com",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAIAAYagAAAAEHzcGij/Vb8YQ82rmYciOfBb7uLxJ5d6QJll3IW/GWkaU6EkcI0ug/3ILDH34dI74w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9ceef337-dc96-43ca-8745-203891dc66b8",
                            TwoFactorEnabled = false,
                            UserName = "User7"
                        },
                        new
                        {
                            Id = "FC7DC2E8-EECC-4AC9-99F6-F3937B1EF538",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8be7ed8c-265c-42ec-ba44-4d95acf88b31",
                            Email = "User8@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER8@GMAIL.com",
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAIAAYagAAAAEIyA5Nf4OS4ezZLFqgAiiyr+y2c862HjRpad652tWeBq6pyZ5m+XiyyyEyT9j9YjNQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b267c7f0-5581-49ba-8baf-339a8defb7cb",
                            TwoFactorEnabled = false,
                            UserName = "User8"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "D7AE250D-E7D5-46AB-92B5-94E96BECDAE6",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "D99CF9F8-F4E8-478F-BE40-5418B5D3EF8D",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "20BA9755-D9CE-45AE-97D4-CB5AAA5D5956",
                            RoleId = "D7AE250D-E7D5-46AB-92B5-94E96BECDAE6"
                        },
                        new
                        {
                            UserId = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            RoleId = "D99CF9F8-F4E8-478F-BE40-5418B5D3EF8D"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Forum.Entities.Comment", b =>
                {
                    b.HasOne("Forum.Entities.User", "CommentAuthor")
                        .WithMany("Comments")
                        .HasForeignKey("CommentAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forum.Entities.Topic", "Topic")
                        .WithMany("Comments")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentAuthor");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Forum.Entities.Topic", b =>
                {
                    b.HasOne("Forum.Entities.User", "TopicAuthor")
                        .WithMany("Topics")
                        .HasForeignKey("TopicAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TopicAuthor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Forum.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Forum.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forum.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Forum.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Forum.Entities.Topic", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Forum.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Topics");
                });
#pragma warning restore 612, 618
        }
    }
}
