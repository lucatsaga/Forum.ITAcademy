// <auto-generated />
using System;
using Forum.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Forum.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240614155625_Initial2")]
    partial class Initial2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Forum.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("CommentAuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("CommentAuthorId");

                    b.HasIndex("TopicId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            CommentAuthorId = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            Content = "Ikomentari",
                            CreatedAt = new DateTime(2024, 6, 14, 15, 56, 24, 817, DateTimeKind.Utc).AddTicks(3389),
                            TopicId = 1
                        },
                        new
                        {
                            CommentId = 2,
                            CommentAuthorId = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            Content = "IIkomentari",
                            CreatedAt = new DateTime(2024, 6, 14, 15, 56, 24, 817, DateTimeKind.Utc).AddTicks(3392),
                            TopicId = 1
                        },
                        new
                        {
                            CommentId = 3,
                            CommentAuthorId = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            Content = "IIIkomentari",
                            CreatedAt = new DateTime(2024, 6, 14, 15, 56, 24, 817, DateTimeKind.Utc).AddTicks(3394),
                            TopicId = 2
                        },
                        new
                        {
                            CommentId = 4,
                            CommentAuthorId = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            Content = "IVkomentari",
                            CreatedAt = new DateTime(2024, 6, 14, 15, 56, 24, 817, DateTimeKind.Utc).AddTicks(3395),
                            TopicId = 1
                        },
                        new
                        {
                            CommentId = 5,
                            CommentAuthorId = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            Content = "Vkomentari",
                            CreatedAt = new DateTime(2024, 6, 14, 15, 56, 24, 817, DateTimeKind.Utc).AddTicks(3406),
                            TopicId = 3
                        },
                        new
                        {
                            CommentId = 6,
                            CommentAuthorId = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            Content = "VIKomentari",
                            CreatedAt = new DateTime(2024, 6, 14, 15, 56, 24, 817, DateTimeKind.Utc).AddTicks(3408),
                            TopicId = 3
                        },
                        new
                        {
                            CommentId = 7,
                            CommentAuthorId = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            Content = "VIIKomentari",
                            CreatedAt = new DateTime(2024, 6, 14, 15, 56, 24, 817, DateTimeKind.Utc).AddTicks(3410),
                            TopicId = 3
                        },
                        new
                        {
                            CommentId = 8,
                            CommentAuthorId = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            Content = "VIIKomentari",
                            CreatedAt = new DateTime(2024, 6, 14, 15, 56, 24, 817, DateTimeKind.Utc).AddTicks(3412),
                            TopicId = 2
                        });
                });

            modelBuilder.Entity("Forum.Entities.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopicAuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TopicId");

                    b.HasIndex("TopicAuthorId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            TopicId = 1,
                            CreatedAt = new DateTime(2024, 6, 14, 15, 56, 24, 817, DateTimeKind.Utc).AddTicks(2858),
                            State = "Pending",
                            Status = "Active",
                            TopicAuthorId = "20BA9755-D9CE-45AE-97D4-CB5AAA5D5956",
                            TopicName = "TopicN1"
                        },
                        new
                        {
                            TopicId = 2,
                            CreatedAt = new DateTime(2024, 6, 14, 15, 56, 24, 817, DateTimeKind.Utc).AddTicks(2864),
                            State = "Pending",
                            Status = "Active",
                            TopicAuthorId = "20BA9755-D9CE-45AE-97D4-CB5AAA5D5956",
                            TopicName = "TopicN2"
                        },
                        new
                        {
                            TopicId = 3,
                            CreatedAt = new DateTime(2024, 6, 14, 15, 56, 24, 817, DateTimeKind.Utc).AddTicks(2866),
                            State = "Pending",
                            Status = "Active",
                            TopicAuthorId = "20BA9755-D9CE-45AE-97D4-CB5AAA5D5956",
                            TopicName = "TopicN3"
                        },
                        new
                        {
                            TopicId = 4,
                            CreatedAt = new DateTime(2024, 6, 14, 15, 56, 24, 817, DateTimeKind.Utc).AddTicks(2867),
                            State = "Pending",
                            Status = "Active",
                            TopicAuthorId = "FC5DA2E8-EACC-4AC9-99F6-F3937B1EF538",
                            TopicName = "TopicN4"
                        },
                        new
                        {
                            TopicId = 5,
                            CreatedAt = new DateTime(2024, 6, 14, 15, 56, 24, 817, DateTimeKind.Utc).AddTicks(2869),
                            State = "Pending",
                            Status = "Active",
                            TopicAuthorId = "FC5DA2E8-EACC-4AC9-99F6-F3937B1EF538",
                            TopicName = "TopicN5"
                        },
                        new
                        {
                            TopicId = 6,
                            CreatedAt = new DateTime(2024, 6, 14, 15, 56, 24, 817, DateTimeKind.Utc).AddTicks(2871),
                            State = "Pending",
                            Status = "Active",
                            TopicAuthorId = "FC5DA2E8-EACC-4AC9-99F6-F3937B1EF538",
                            TopicName = "TopicN6"
                        },
                        new
                        {
                            TopicId = 7,
                            CreatedAt = new DateTime(2024, 6, 14, 15, 56, 24, 817, DateTimeKind.Utc).AddTicks(2873),
                            State = "Pending",
                            Status = "Active",
                            TopicAuthorId = "FC5DA2E8-EACC-4AC9-99F6-F3937B1EF538",
                            TopicName = "TopicN7"
                        });
                });

            modelBuilder.Entity("Forum.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "20BA9755-D9CE-45AE-97D4-CB5AAA5D5956",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66cf88b1-38a5-4671-bda2-4900b847a0b3",
                            Email = "User1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@GMAIL.com",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEOGYHyyMxg07UVq1i3NbRz8PikOlFM7MZMeQWw2NhEcownOyE7fVN3JR+objoxnVFw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5b2c0b3d-fc69-4ee0-955a-63c387b72d3d",
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b245042-4ab8-45f1-8934-5e2ee1cc2875",
                            Email = "User2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@GMAIL.com",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEMva+SX5eT2U+UiZ4n6+n/uLPToJHFObD5EFAVtNmFwifz5DkcBe0BWw/Nv0iCEIXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c0772ab7-487c-4ef2-b596-7bca2b1c3f93",
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = "FC2DA2E8-EECC-4AC9-99F6-F3937B1EF538",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f25afcca-540d-4aa4-a5fc-2fd9aa66641f",
                            Email = "User3@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@GMAIL.com",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAIAAYagAAAAECaO7+TnMjeQyarvn9L/6DAiGdwerpctdD+HFJti7jneyt4Afo7ZIOJ9aSKOhG69WQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "624b3edc-9b24-4ff8-8112-a5a286aa7d70",
                            TwoFactorEnabled = false,
                            UserName = "User3"
                        },
                        new
                        {
                            Id = "FC3DA2E8-EECC-4AC9-99F6-F4937B1EF538",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00debc85-b9c2-4f03-9283-70b725c16216",
                            Email = "User4@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@GMAIL.com",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAIAAYagAAAAEJmeQtWblV5EQW0VX8CHocJqxSNIZzOlkoEPWATKiqp1Zu3c2AEsNWjsAtmx288MWg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6ad3034a-4c5b-4210-92b6-8b146874d65e",
                            TwoFactorEnabled = false,
                            UserName = "User4"
                        },
                        new
                        {
                            Id = "FC4DA2E8-EECC-5AC9-99F6-F3937B1EF538",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2a895800-34ad-4390-9ea8-78e159e005f3",
                            Email = "User5@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@GMAIL.com",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAIAAYagAAAAEDcI7vYmYbethKMEazJc1eXWLqQShUMIWHne6wMIVoklwpLrNnM/ZaGyMwlcOAWj1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d2bcefa0-b2f1-4b47-999f-44ad03661f07",
                            TwoFactorEnabled = false,
                            UserName = "User5"
                        },
                        new
                        {
                            Id = "FC5DA2E8-EACC-4AC9-99F6-F3937B1EF538",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "49114a73-63bb-4de1-9f41-22bdcb1e6a60",
                            Email = "User6@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER6@GMAIL.com",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAIAAYagAAAAED2EXd0XsOeu0ztIdRbZtwGF9oL4tjB//XCJstjPjHqBynuuOLtNXwVYQ1gVM0DciQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c5ed46a2-bed5-4492-95ca-4f3d4b8ebe97",
                            TwoFactorEnabled = false,
                            UserName = "User6"
                        },
                        new
                        {
                            Id = "FC6DB2E8-EECC-4AC9-99F6-F3937B1EF538",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "afcbb5d8-86e8-4810-af4c-9c1bec5fb2a6",
                            Email = "User7@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER7@GMAIL.com",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAIAAYagAAAAEEZNE99L3B+emsIRMu7+c1ZRIcA/PLVL7BPa3tgt2UrzVwKG6G8pMzMnryUk83GHdw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "07ebc7f6-5a02-441a-b28d-dc566e1b01da",
                            TwoFactorEnabled = false,
                            UserName = "User7"
                        },
                        new
                        {
                            Id = "FC7DC2E8-EECC-4AC9-99F6-F3937B1EF538",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4011e519-217b-492b-bea4-cb1101feb0b6",
                            Email = "User8@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER8@GMAIL.com",
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAIAAYagAAAAEPN3lP4fa+pm6Q9MAQz/RmF5yBEcgiXXD4g7qm9j2AVUFM6Qcd+dzl+TZSAAVOVepA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9aed5e3f-9e78-4e03-a139-cbbf7e283d0b",
                            TwoFactorEnabled = false,
                            UserName = "User8"
                        },
                        new
                        {
                            Id = "FT7DC2E8-EECC-4AC9-99F6-F3937B1EF538",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "14f486b8-fe4e-4e6e-b905-67a9a5880354",
                            Email = "adminreal@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINREAL@gmail.com",
                            NormalizedUserName = "ADMINREAL@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBISG1Jm3caZe2GQ4Kk3IZpBZAfMOgDfyJiP1iW/gwREgNFnX+tiRx1WiQAxh//RNQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8b017bcd-5c4a-4e6f-b58f-b5e29290db89",
                            TwoFactorEnabled = false,
                            UserName = "AdminReal@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "D7AE250D-E7D5-46AB-92B5-94E96BECDAE6",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "D99CF9F8-F4E8-478F-BE40-5418B5D3EF8D",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "20BA9755-D9CE-45AE-97D4-CB5AAA5D5956",
                            RoleId = "D7AE250D-E7D5-46AB-92B5-94E96BECDAE6"
                        },
                        new
                        {
                            UserId = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            RoleId = "D99CF9F8-F4E8-478F-BE40-5418B5D3EF8D"
                        },
                        new
                        {
                            UserId = "FT7DC2E8-EECC-4AC9-99F6-F3937B1EF538",
                            RoleId = "D7AE250D-E7D5-46AB-92B5-94E96BECDAE6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Forum.Entities.Comment", b =>
                {
                    b.HasOne("Forum.Entities.User", "CommentAuthor")
                        .WithMany("Comments")
                        .HasForeignKey("CommentAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forum.Entities.Topic", "Topic")
                        .WithMany("Comments")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentAuthor");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Forum.Entities.Topic", b =>
                {
                    b.HasOne("Forum.Entities.User", "TopicAuthor")
                        .WithMany("Topics")
                        .HasForeignKey("TopicAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TopicAuthor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Forum.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Forum.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forum.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Forum.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Forum.Entities.Topic", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Forum.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Topics");
                });
#pragma warning restore 612, 618
        }
    }
}
