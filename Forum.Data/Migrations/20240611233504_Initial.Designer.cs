// <auto-generated />
using System;
using Forum.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Forum.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240611233504_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Forum.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("CommentAuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("CommentAuthorId");

                    b.HasIndex("TopicId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            CommentAuthorId = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            Content = "Ikomentari",
                            CreatedAt = new DateTime(2024, 6, 11, 23, 35, 4, 141, DateTimeKind.Utc).AddTicks(765),
                            TopicId = 1
                        },
                        new
                        {
                            CommentId = 2,
                            CommentAuthorId = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            Content = "IIkomentari",
                            CreatedAt = new DateTime(2024, 6, 11, 23, 35, 4, 141, DateTimeKind.Utc).AddTicks(766),
                            TopicId = 1
                        },
                        new
                        {
                            CommentId = 3,
                            CommentAuthorId = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            Content = "IIIkomentari",
                            CreatedAt = new DateTime(2024, 6, 11, 23, 35, 4, 141, DateTimeKind.Utc).AddTicks(767),
                            TopicId = 2
                        },
                        new
                        {
                            CommentId = 4,
                            CommentAuthorId = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            Content = "IVkomentari",
                            CreatedAt = new DateTime(2024, 6, 11, 23, 35, 4, 141, DateTimeKind.Utc).AddTicks(819),
                            TopicId = 1
                        },
                        new
                        {
                            CommentId = 5,
                            CommentAuthorId = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            Content = "Vkomentari",
                            CreatedAt = new DateTime(2024, 6, 11, 23, 35, 4, 141, DateTimeKind.Utc).AddTicks(825),
                            TopicId = 3
                        },
                        new
                        {
                            CommentId = 6,
                            CommentAuthorId = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            Content = "VIKomentari",
                            CreatedAt = new DateTime(2024, 6, 11, 23, 35, 4, 141, DateTimeKind.Utc).AddTicks(826),
                            TopicId = 3
                        },
                        new
                        {
                            CommentId = 7,
                            CommentAuthorId = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            Content = "VIIKomentari",
                            CreatedAt = new DateTime(2024, 6, 11, 23, 35, 4, 141, DateTimeKind.Utc).AddTicks(827),
                            TopicId = 3
                        },
                        new
                        {
                            CommentId = 8,
                            CommentAuthorId = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            Content = "VIIKomentari",
                            CreatedAt = new DateTime(2024, 6, 11, 23, 35, 4, 141, DateTimeKind.Utc).AddTicks(828),
                            TopicId = 2
                        });
                });

            modelBuilder.Entity("Forum.Entities.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopicAuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TopicId");

                    b.HasIndex("TopicAuthorId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            TopicId = 1,
                            CreatedAt = new DateTime(2024, 6, 11, 23, 35, 4, 141, DateTimeKind.Utc).AddTicks(705),
                            State = "Pending",
                            Status = "Active",
                            TopicAuthorId = "20BA9755-D9CE-45AE-97D4-CB5AAA5D5956",
                            TopicName = "TopicN1"
                        },
                        new
                        {
                            TopicId = 2,
                            CreatedAt = new DateTime(2024, 6, 11, 23, 35, 4, 141, DateTimeKind.Utc).AddTicks(709),
                            State = "Pending",
                            Status = "Active",
                            TopicAuthorId = "20BA9755-D9CE-45AE-97D4-CB5AAA5D5956",
                            TopicName = "TopicN2"
                        },
                        new
                        {
                            TopicId = 3,
                            CreatedAt = new DateTime(2024, 6, 11, 23, 35, 4, 141, DateTimeKind.Utc).AddTicks(710),
                            State = "Pending",
                            Status = "Active",
                            TopicAuthorId = "20BA9755-D9CE-45AE-97D4-CB5AAA5D5956",
                            TopicName = "TopicN3"
                        },
                        new
                        {
                            TopicId = 4,
                            CreatedAt = new DateTime(2024, 6, 11, 23, 35, 4, 141, DateTimeKind.Utc).AddTicks(712),
                            State = "Pending",
                            Status = "Active",
                            TopicAuthorId = "FC5DA2E8-EACC-4AC9-99F6-F3937B1EF538",
                            TopicName = "TopicN4"
                        },
                        new
                        {
                            TopicId = 5,
                            CreatedAt = new DateTime(2024, 6, 11, 23, 35, 4, 141, DateTimeKind.Utc).AddTicks(713),
                            State = "Pending",
                            Status = "Active",
                            TopicAuthorId = "FC5DA2E8-EACC-4AC9-99F6-F3937B1EF538",
                            TopicName = "TopicN5"
                        },
                        new
                        {
                            TopicId = 6,
                            CreatedAt = new DateTime(2024, 6, 11, 23, 35, 4, 141, DateTimeKind.Utc).AddTicks(714),
                            State = "Pending",
                            Status = "Active",
                            TopicAuthorId = "FC5DA2E8-EACC-4AC9-99F6-F3937B1EF538",
                            TopicName = "TopicN6"
                        },
                        new
                        {
                            TopicId = 7,
                            CreatedAt = new DateTime(2024, 6, 11, 23, 35, 4, 141, DateTimeKind.Utc).AddTicks(715),
                            State = "Pending",
                            Status = "Active",
                            TopicAuthorId = "FC5DA2E8-EACC-4AC9-99F6-F3937B1EF538",
                            TopicName = "TopicN7"
                        });
                });

            modelBuilder.Entity("Forum.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "20BA9755-D9CE-45AE-97D4-CB5AAA5D5956",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f9ef1f49-8fe5-46ad-a5e9-0cb922e432d7",
                            Email = "User1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@GMAIL.com",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEE4O6ivvxMI7e1dUy19f4NPN3ZBCpOVffQgWuHOPfTaBZg+fjYDeckxj9ywREt7Ayg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "235183a5-197e-4698-9ab7-d2f38e4cbf91",
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7731f9e9-ef01-4490-9840-92fe25134fea",
                            Email = "User2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@GMAIL.com",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAENbwxrgMkIdGWoiTZf4J1g+RFJzlQhB0nSQW7bkqtTCu6TyoQlgNILoNLfT70tx2rw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8ce63fe7-d83e-4f86-ae2d-ae95c2b063e0",
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = "FC2DA2E8-EECC-4AC9-99F6-F3937B1EF538",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b63d03c6-993d-474c-abd6-788247ae566c",
                            Email = "User3@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@GMAIL.com",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAIAAYagAAAAELNYgWgZr8zNiuba/0CfWn0y7TpYv7w5iZjqeUxyZMODZfashu0M7ySl9RHX3evaGg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f6aa4fd-c14a-4a67-8bf2-b989e6d3902f",
                            TwoFactorEnabled = false,
                            UserName = "User3"
                        },
                        new
                        {
                            Id = "FC3DA2E8-EECC-4AC9-99F6-F4937B1EF538",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b73a343-f49d-4de5-ac46-9f53b53131a1",
                            Email = "User4@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@GMAIL.com",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAIAAYagAAAAENiXmk1iusPFCCka7CtNZECiRHqqr7ckxsm8iEhJW71r0YnZp//DxmPc9nE4D1uy2A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "14a913b4-974c-48ce-b007-c64842ee8854",
                            TwoFactorEnabled = false,
                            UserName = "User4"
                        },
                        new
                        {
                            Id = "FC4DA2E8-EECC-5AC9-99F6-F3937B1EF538",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "33689a4e-cc73-4be8-8465-ac9b1a8eeef9",
                            Email = "User5@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@GMAIL.com",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAIAAYagAAAAEGt+qkTCEice9wPcN4D5yBtmhYfmQBA2D4zH0tFrvRr3PvhlFBdAuCLxg/iuCcCcZg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2b2a51df-8197-413e-a02f-4d9701cd933d",
                            TwoFactorEnabled = false,
                            UserName = "User5"
                        },
                        new
                        {
                            Id = "FC5DA2E8-EACC-4AC9-99F6-F3937B1EF538",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4cdbc7ca-7f39-4e22-baa9-1b06688c27dd",
                            Email = "User6@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER6@GMAIL.com",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAIAAYagAAAAEEq1DL3xAzhRqtnv4PTBQ8DnRWP+jZ46LRJFsgWSpkwsCH/UFisF+5jZ3liNJJ2WFQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d2be5f4b-d45f-4d87-b3e5-f70c472bb913",
                            TwoFactorEnabled = false,
                            UserName = "User6"
                        },
                        new
                        {
                            Id = "FC6DB2E8-EECC-4AC9-99F6-F3937B1EF538",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "263d95d2-aca4-4475-89e9-c98828715e5e",
                            Email = "User7@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER7@GMAIL.com",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAIAAYagAAAAEFLCsHQE3vd2n43z+0ZleobTP36iqmuqACmm5pdQAzS4r/2UjBkWYcwwnrTB4SPQ5w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3936a2b1-2703-4efd-b198-8bf1e8ab2635",
                            TwoFactorEnabled = false,
                            UserName = "User7"
                        },
                        new
                        {
                            Id = "FC7DC2E8-EECC-4AC9-99F6-F3937B1EF538",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f0cd91d0-34e4-4bba-8281-1de8cd963b12",
                            Email = "User8@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER8@GMAIL.com",
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAIAAYagAAAAEOVazK44dwAJiZNg+0d/MCnkv8i2/WD6jNePQ2sFKcbzJLwQi9dk/w0OpLhYsJZvlA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a3fcccc-0ad9-4451-b140-5d9a6d3676b4",
                            TwoFactorEnabled = false,
                            UserName = "User8"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "D7AE250D-E7D5-46AB-92B5-94E96BECDAE6",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "D99CF9F8-F4E8-478F-BE40-5418B5D3EF8D",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "20BA9755-D9CE-45AE-97D4-CB5AAA5D5956",
                            RoleId = "D7AE250D-E7D5-46AB-92B5-94E96BECDAE6"
                        },
                        new
                        {
                            UserId = "FC5DA2E8-EECC-4AC9-99F6-F3937B1EF537",
                            RoleId = "D99CF9F8-F4E8-478F-BE40-5418B5D3EF8D"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Forum.Entities.Comment", b =>
                {
                    b.HasOne("Forum.Entities.User", "CommentAuthor")
                        .WithMany("Comments")
                        .HasForeignKey("CommentAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forum.Entities.Topic", "Topic")
                        .WithMany("Comments")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentAuthor");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Forum.Entities.Topic", b =>
                {
                    b.HasOne("Forum.Entities.User", "TopicAuthor")
                        .WithMany("Topics")
                        .HasForeignKey("TopicAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TopicAuthor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Forum.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Forum.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forum.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Forum.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Forum.Entities.Topic", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Forum.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Topics");
                });
#pragma warning restore 612, 618
        }
    }
}
